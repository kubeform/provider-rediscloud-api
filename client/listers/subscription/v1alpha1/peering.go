/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-rediscloud-api/apis/subscription/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PeeringLister helps list Peerings.
// All objects returned here must be treated as read-only.
type PeeringLister interface {
	// List lists all Peerings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Peering, err error)
	// Peerings returns an object that can list and get Peerings.
	Peerings(namespace string) PeeringNamespaceLister
	PeeringListerExpansion
}

// peeringLister implements the PeeringLister interface.
type peeringLister struct {
	indexer cache.Indexer
}

// NewPeeringLister returns a new PeeringLister.
func NewPeeringLister(indexer cache.Indexer) PeeringLister {
	return &peeringLister{indexer: indexer}
}

// List lists all Peerings in the indexer.
func (s *peeringLister) List(selector labels.Selector) (ret []*v1alpha1.Peering, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Peering))
	})
	return ret, err
}

// Peerings returns an object that can list and get Peerings.
func (s *peeringLister) Peerings(namespace string) PeeringNamespaceLister {
	return peeringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PeeringNamespaceLister helps list and get Peerings.
// All objects returned here must be treated as read-only.
type PeeringNamespaceLister interface {
	// List lists all Peerings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Peering, err error)
	// Get retrieves the Peering from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Peering, error)
	PeeringNamespaceListerExpansion
}

// peeringNamespaceLister implements the PeeringNamespaceLister
// interface.
type peeringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Peerings in the indexer for a given namespace.
func (s peeringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Peering, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Peering))
	})
	return ret, err
}

// Get retrieves the Peering from the indexer for a given namespace and name.
func (s peeringNamespaceLister) Get(name string) (*v1alpha1.Peering, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("peering"), name)
	}
	return obj.(*v1alpha1.Peering), nil
}
